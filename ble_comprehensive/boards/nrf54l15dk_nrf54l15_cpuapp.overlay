/* overlay file for app core */

/ {
	chosen {
		nordic,pm-ext-flash = &mx25r64;
		zephyr,console = &uart30;
		ncs,dtm-uart = &uart20;
	};
	aliases {
		myi2c = &i2c22;
		myspi = &spi21;
		myuart = &uart20;  
	};	
	/* See &GPIO0 definition below */
	zephyr,user {
		io-channels = <&adc 0>, <&adc 1>;
		extint-gpios = <&gpio0 4 GPIO_ACTIVE_LOW>;
	};		
};

&radio {
	status = "okay";
	/delete-property/ dfe-supported;
	// /* This is a number of antennas that are available on antenna matrix
	//  * designed by Nordic. For more information see README.rst.
	//  */
	// dfe-antenna-num = <12>;
	// /* This is a setting that enables antenna 12 (in antenna matrix designed
	//  * by Nordic) for PDU. For more information see README.rst.
	//  */
	// dfe-pdu-antenna = <0x0>;

	// /* These are GPIO pin numbers that are provided to
	//  * Radio peripheral. The pins will be acquired by Radio to
	//  * drive antenna switching.
	//  * Pin numbers are selected to drive switches on antenna matrix
	//  * desinged by Nordic. For more information see README.rst.
	//  */
	// dfegpio0-gpios = <&gpio0 4 0>;
	// dfegpio1-gpios = <&gpio0 5 0>;
	// dfegpio2-gpios = <&gpio0 6 0>;
	// dfegpio3-gpios = <&gpio0 7 0>;
};

&uicr {
	nfct-pins-as-gpios;
};

&pinctrl {
	// &uart20_sleep {
	// 	group1 {
	// 		psels = <NRF_PSEL(UART_TX, 1, 4)>,
	// 				<NRF_PSEL(UART_RX, 1, 5)>;
	// 	};
	// };
	
	// &uart20_default {
	// 	group1 {
	// 		psels = <NRF_PSEL(UART_TX, 1, 4)>;
	// 	};
	// 	group2 {
	// 		psels = <NRF_PSEL(UART_RX, 1, 5)>;
	// 	};
	// };
	
	// &uart30_sleep {
	// 	group1 {
	// 		psels = <NRF_PSEL(UART_TX, 0, 0)>,
	// 				<NRF_PSEL(UART_RX, 0, 1)>;
	// 	};
	// };
	
	// &uart30_default {
	// 	group1 {
	// 		psels = <NRF_PSEL(UART_TX, 0, 0)>;
	// 	};
	// 	group2 {
	// 		psels = <NRF_PSEL(UART_RX, 0, 1)>;
	// 	};
	// };
		
	i2c22_default: i2c22_default {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 1, 11)>,
				<NRF_PSEL(TWIM_SCL, 1, 12)>;
			bias-pull-up;
			nordic,drive-mode = <NRF_DRIVE_S0D1>;				
		};
	};

	i2c22_sleep: i2c22_sleep {
		group1 {
			psels = <NRF_PSEL(TWIM_SDA, 1, 11)>,
				<NRF_PSEL(TWIM_SCL, 1, 12)>;
			low-power-enable;
		};
	};	

	spi21_default: spi21_default {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 2, 6)>,
				<NRF_PSEL(SPIM_MOSI, 1, 6)>,
				<NRF_PSEL(SPIM_MISO, 1, 7)>;
		};
	};

	spi21_sleep: spi21_sleep {
		group1 {
			psels = <NRF_PSEL(SPIM_SCK, 2, 6)>,
				<NRF_PSEL(SPIM_MOSI, 1, 6)>,
				<NRF_PSEL(SPIM_MISO, 1, 7)>;
			low-power-enable;
		};
	};
};


&uart30 {
	status = "okay";
	current-speed = < 115200 >;
	/delete-property/ rts-pin;
	/delete-property/ cts-pin;
	/delete-property/ hw-flow-control;
	/delete-property/ frame-timeout-supported;
};

&uart20 {
	status = "okay";
	current-speed = < 1000000 >;
	/delete-property/ rts-pin;
	/delete-property/ cts-pin;
	/delete-property/ hw-flow-control;
	/delete-property/ frame-timeout-supported;
};

&timer20 {
    status="okay";
};

&timer21 {
    status="okay";
};

&dppic20 {
    status = "okay";
};

&spi21 {
	status = "okay"; 
	compatible = "nordic,nrf-spim";
	pinctrl-0 = <&spi21_default>;
	pinctrl-1 = <&spi21_sleep>;
	pinctrl-names = "default", "sleep";	
    cs-gpios = <&gpio2 10 GPIO_ACTIVE_LOW>, <&gpio2 8 GPIO_ACTIVE_LOW>;
	spi_dev_0: spi_dev_0@0 {
		compatible = "spi-user-define";
		reg = <0>;
		spi-max-frequency = <DT_FREQ_M(4)>;
	}; 
	spi_dev_1: spi_dev_1@1 {
		compatible = "spi-user-define";
		reg = <1>;
		spi-max-frequency = <DT_FREQ_M(8)>;
	};    			   	
};

&i2c22 {
	status = "okay";
	clock-frequency = <I2C_BITRATE_FAST>;
	pinctrl-0 = < &i2c22_default >;
	pinctrl-1 = < &i2c22_sleep >;
	pinctrl-names = "default", "sleep";
	i2c_dev_0: i2c_dev_0@50 {
		compatible = "i2c-device";
		reg = <0x50>;
	};
	i2c_dev_1: i2c_dev_1@b {
		compatible = "i2c-device";
		reg = <0x0B>;
	}; 		
};

&adc {
	status = "okay";
	#address-cells = <1>;
	#size-cells = <0>;

	channel@0 {
		reg = <0>;
		zephyr,gain = "ADC_GAIN_2_5";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 20)>;
		zephyr,input-positive = <NRF_SAADC_AIN7>;
		zephyr,vref-mv = <900>;
		zephyr,resolution = <10>;					
	};
	
	channel@1 {
		reg = <1>;
		zephyr,gain = "ADC_GAIN_2_5";
		zephyr,reference = "ADC_REF_INTERNAL";
		zephyr,acquisition-time = <ADC_ACQ_TIME(ADC_ACQ_TIME_MICROSECONDS, 20)>;
		zephyr,input-positive = <NRF_SAADC_VDD>;
		zephyr,vref-mv = <900>;
		zephyr,resolution = <10>;				
	};

};

&gpio0 {
	/* p0.4 sense for edge */
	sense-edge-mask = <0x0010>;
};

// restore full RRAM and SRAM space - by default some parts are dedicated to FLRP
&cpuapp_rram {
	reg = <0x0 DT_SIZE_K(1524)>;
};

&cpuapp_sram {
	reg = <0x20000000 DT_SIZE_K(256)>;
	ranges = <0x0 0x20000000  0x40000>;
};

&mx25r64 {
	status = "okay";
};

/* delete sw3 to reserve the related pin for GPIO use */
/ {
	aliases {  
	 /delete-property/ sw3;
	 /delete-property/ led3;
	};
  };

/delete-node/ &button3;
/delete-node/ &led3;